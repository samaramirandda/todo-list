// ==================== INICIALIZA√á√ÉO DO SISTEMA ====================
// Carrega as tarefas salvas no localStorage do navegador, ou cria um array vazio se n√£o houver nenhuma
let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
// JSON.parse() converte texto JSON de volta para objeto JavaScript
// localStorage.getItem("tasks") busca dados salvos com a chave "tasks" no navegador
// || [] significa "ou array vazio" caso n√£o exista nada salvo (operador OR l√≥gico)





// ==================== VARI√ÅVEIS DE CONTROLE DOS FILTROS ====================
// Armazena o filtro de status atual (todas, pendentes, concluidas)
let currentFilter = 'todas';
// Vari√°vel global que controla qual tipo de tarefa est√° sendo exibido

// Armazena o filtro de categoria atual (todas, pessoal, trabalho, estudo)
let currentCategoryFilter = 'todas';
// Vari√°vel global que controla qual categoria est√° sendo filtrada




// ==================== VARI√ÅVEIS DE CONTROLE DOS TEMAS ====================
// Carrega o tema salvo ou usa 'light' como padr√£o
let currentTheme = localStorage.getItem("theme") || 'light';
// localStorage.getItem("theme") busca o tema salvo no navegador

// ==================== FUN√á√ÉO PARA ALTERNAR TEMA ====================
// Fun√ß√£o para alternar entre tema claro e escuro
function toggleTheme() {
    // Marca que usu√°rio escolheu tema manualmente
    localStorage.setItem('theme-manually-set', 'true');

    // Alterna tema
    currentTheme = currentTheme === 'light' ? 'dark' : 'light';
    // Se for 'light', troca para 'dark', caso contr√°rio, volta para 'light'

    // ==================== APLICA√á√ÉO DO TEMA ====================
    // Aplica o novo tema
    applyTheme();

    // ==================== PERSIST√äNCIA DO TEMA ====================
    // Salva a prefer√™ncia do usu√°rio no localStorage
    localStorage.setItem('theme', currentTheme);
    // Salva tema escolhido pra ser lembrado na proxima visita
}

// ==================== FUN√á√ÉO PARA APLICAR TEMA ====================
// Fun√ß√£o para aplicar o tema selecionado
function applyTheme(){
    // ==================== APLICA√á√ÉO NO ELEMENTO HTML ====================
    // Aplica atributo data-theme no elemento html
    document.documentElement.setAttribute('data-theme', currentTheme);
    // document.documentElement √© o elemento <html>
    // setAttribute('data-theme', currentTheme) adiciona atributo data-theme="light" ou "dark"
    // Isso ativa as vari√°veis CSS correspondentes definidas em :root e [data-theme="dark"]

    // ==================== ATUALIZA√á√ÉO DO BOT√ÉO ====================
    // Atualiza texto e √≠cone do bot√£o baseado no tema atual
    const themeBtn = document.getElementById('theme-btn');
    // Pega o bot√£o de tema pelo ID 'theme-btn'

    if (currentTheme === 'dark') {
        // Se tema atual √© escuro
        themeBtn.textContent = 'üåû Claro';
        // Mostra √≠cone de sol e texto "Claro" (para mudar para tema claro)
        themeBtn.setAttribute('title', 'Mudar para tema claro');
        // Define t√≠tulo do bot√£o para acessibilidade (tooltip)
    } else {
        // Se tema atual √© claro
        themeBtn.textContent = 'üåô Escuro';
        // Mostra √≠cone de lua e texto "Escuro" (para mudar para tema escuro)
        themeBtn.setAttribute('title', 'Mudar para tema escuro');
        // Define t√≠tulo do bot√£o para acessibilidade (tooltip)
    }
}

// ==================== FUN√á√ÉO PARA INICIALIZAR TEMA ====================
// Fun√ß√£o para configurar tema inicial
function initializeTheme() {
    // ==================== APLICA√á√ÉO DO TEMA SALVO ====================
    // Aplica o tema salvo no localStorage ou o padr√£o 'light'
    applyTheme();

    // ==================== DETEC√á√ÉO DE PREFER√äNCIA DO SISTEMA ====================
    // Verifica se usu√°rio nunca escolheu um tema
    if(!localStorage.getItem("theme")) {
        // Se n√£o houver tema salvo, verifica prefer√™ncia do sistema
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        // window.matchMedia() verifica media queries CSS
        // '(prefers-color-scheme: dark)' detecta se SO est√° em modo escuro
        // .matches retorna true se a condi√ß√£o for atendida

        if (prefersDark) {
            currentTheme = 'dark';
            // Se prefer√™ncia do sistema √© escura, define tema atual como 'dark'
            applyTheme();
            localStorag.setItem('theme', currentTheme);
        }
    }
}
// ==================== LISTENER PARA MUDAN√áAS NO SISTEMA ====================
// Escuta mudan√ßas na prefer√™ncia de tema do sistema
window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
    // addEventListener('change') escuta mudan√ßas na media query
    // Dispara quando usu√°rio muda tema do sistema operacional

    // S√≥ aplica mudan√ßa autom√°tica se usu√°rio n√£o escolheu manualmente
    if (!localStorage.getItem("theme")) {
        // Se usu√°rio nunca escolheu tema manualmente
        currentTheme = event.matches ? 'dark' : 'light';
        // e.matches √© true se sistema est√° em modo escuro
        applyTheme(); // Aplica o novo tema baseado na prefer√™ncia do sistema
        localStorage.setItem('theme', currentTheme); // Salva prefer√™ncia no localStorage
    }
});





// ==================== FUN√á√ÉO PARA PERSIST√äNCIA DE DADOS ====================
// Fun√ß√£o para salvar as tarefas no localStorage (mem√≥ria local do navegador)
function saveTasks() {
    // Converte o array de tarefas em texto JSON e salva no localStorage
    localStorage.setItem("tasks", JSON.stringify(tasks));
    // JSON.stringify() converte objeto JavaScript para texto JSON (string)
    // localStorage.setItem() salva dados no navegador com uma chave espec√≠fica
    // Os dados permanecem salvos mesmo ap√≥s fechar o navegador
}








// ==================== FUN√á√ÉO PRINCIPAL DE EXIBI√á√ÉO ====================
// Fun√ß√£o para exibir todas as tarefas na tela
function renderTasks() {
    // Pega o elemento HTML da lista onde as tarefas ser√£o exibidas
    const list = document.getElementById("lista-tarefas");
    // document.getElementById() busca elemento HTML pelo ID especificado
    // const cria uma vari√°vel que n√£o pode ser reatribu√≠da
    
    // Limpa todo o conte√∫do da lista antes de recriar
    list.innerHTML = "";
    // innerHTML = "" remove todo conte√∫do HTML do elemento
    // Isso evita duplica√ß√£o de tarefas quando a fun√ß√£o √© chamada novamente

    // Para cada tarefa no array, cria um item da lista
    tasks.forEach((task, index) => {
        // forEach() percorre cada item do array executando fun√ß√£o para cada um
        // task = tarefa atual sendo processada
        // index = posi√ß√£o no array (0, 1, 2, 3...)
        
        // Cria um novo elemento <li> (item da lista)
        const li = document.createElement("li");
        // createElement() cria um novo elemento HTML na mem√≥ria (ainda n√£o na tela)
        
        // ==================== VERIFICA√á√ïES DE COMPATIBILIDADE ====================
        // (suporte a dados antigos que podem ser strings ao inv√©s de objetos)
        
        // Verifica se task √© objeto ou string (compatibilidade com vers√£o antiga)
        const taskText = typeof task === 'object' ? task.text : task;
        // typeof verifica o tipo de dados da vari√°vel
        // Operador tern√°rio: condi√ß√£o ? valor_se_verdadeiro : valor_se_falso
        // Se for objeto, pega propriedade 'text', sen√£o usa a string diretamente
        
        const isCompleted = typeof task === 'object' ? task.completed : false;
        // Se for objeto, pega propriedade 'completed', sen√£o assume false (n√£o conclu√≠da)
        
        const priority = typeof task === 'object' ? task.priority : 'baixa';
        // Se for objeto, pega propriedade 'priority', sen√£o assume 'baixa' como padr√£o
        
        const category = typeof task === 'object' ? task.category : 'pessoal';
        // Se for objeto, pega propriedade 'category', sen√£o assume 'pessoal' como padr√£o
        
        const dueDate = typeof task === 'object' ? task.dueDate : '';
        // Se for objeto, pega propriedade 'dueDate', sen√£o assume string vazia (sem data)
        
        // ==================== CONSTRU√á√ÉO DO HTML DA TAREFA ====================
        // Define o conte√∫do HTML do item da lista com checkbox e informa√ß√µes extras
        li.innerHTML = `
        <div class="task-content">
            <input type="checkbox" onchange="toggleTask(${index})" ${isCompleted ? 'checked' : ''}>
            <span class="task-text ${isCompleted ? 'completed' : ''}">${taskText}</span>
            <div class="task-info">
                <span class="priority priority-${priority}">${priority.toUpperCase()}</span>
                <span class="category">${category}</span>
                ${dueDate ? `<span class="due-date">üìÖ ${new Date(dueDate).toLocaleDateString()}</span>` : ''}
            </div>
        </div>
        <div class="actions">
            <button onclick="editTask(${index})">‚úèÔ∏è</button>
            <button onclick="removeTask(${index})">üóëÔ∏è</button>
        </div>
        `;
        // Template literal (`) permite inserir vari√°veis JavaScript com ${variavel}
        // onchange="toggleTask(${index})" chama fun√ß√£o quando checkbox √© marcado/desmarcado
        // ${isCompleted ? 'checked' : ''} adiciona atributo 'checked' se tarefa estiver conclu√≠da
        // ${isCompleted ? 'completed' : ''} adiciona classe CSS 'completed' se tarefa estiver conclu√≠da
        // priority.toUpperCase() converte texto da prioridade para mai√∫sculo (ALTA, M√âDIA, BAIXA)
        // new Date(dueDate) cria objeto de data a partir da string
        // .toLocaleDateString() formata data para padr√£o local (ex: 30/07/2025)
        // Operador tern√°rio ${dueDate ? '...' : ''} s√≥ mostra data se ela existir
        
        // Adiciona o item criado √† lista na tela
        list.appendChild(li);
        // appendChild() insere o elemento <li> como filho do elemento <ul>
        // Agora o item aparece visualmente na p√°gina
    });

    // Atualiza contadores ap√≥s renderizar todas as tarefas
    updateTaskCounter();
    // Chama fun√ß√£o que calcula e exibe estat√≠sticas (total, pendentes, conclu√≠das)
}







// ==================== FUN√á√ÉO PARA ADICIONAR NOVA TAREFA ====================
// Fun√ß√£o para adicionar uma nova tarefa
function addTask() {
    // ==================== CAPTURA DOS ELEMENTOS HTML ====================
    // Pega o elemento do campo de input onde o usu√°rio digita a tarefa
    const input = document.getElementById("tarefa");
    // Pega o elemento select para escolher categoria
    const categorySelect = document.getElementById("categoria");
    // Pega o elemento select para escolher prioridade
    const prioritySelect = document.getElementById("prioridade");
    // Pega o elemento input de data para vencimento
    const dueDateInput = document.getElementById("data-vencimento");
    
    // ==================== VALIDA√á√ÉO DOS DADOS ====================
    // Pega o valor digitado e remove espa√ßos em branco no in√≠cio/fim
    const taskText = input.value.trim();
    // .value pega o valor atual do campo de input
    // .trim() remove espa√ßos extras no in√≠cio e fim da string

    // Verifica se o usu√°rio digitou alguma coisa (n√£o est√° vazio)
    if (taskText) {
        // ==================== CRIA√á√ÉO DO OBJETO TAREFA ====================
        // Cria objeto da tarefa com todas as propriedades necess√°rias
        const newTask = {
            id: Date.now(), // Gera um ID √∫nico baseado no timestamp atual (millisegundos desde 1970)
            text: taskText, // O texto da tarefa √© o valor digitado pelo usu√°rio
            completed: false, // Inicialmente, a tarefa n√£o est√° completa
            category: categorySelect.value, // Categoria selecionada no dropdown
            priority: prioritySelect.value, // Prioridade selecionada no dropdown
            dueDate: dueDateInput.value, // Data de vencimento selecionada (formato YYYY-MM-DD)
            createdAt: new Date().toISOString() // Armazena a data de cria√ß√£o no formato ISO (padr√£o internacional)
        };

        // ==================== ATUALIZA√á√ÉO DO SISTEMA ====================
        // Adiciona a nova tarefa ao final do array
        tasks.push(newTask);
        // .push() adiciona elemento no final do array
        
        // ==================== LIMPEZA DOS CAMPOS ====================
        // Limpa o campo de texto
        input.value = "";
        // Limpa o campo de data
        dueDateInput.value = "";
        // Define valor vazio para limpar os campos ap√≥s adicionar tarefa
        
        // ==================== PERSIST√äNCIA E ATUALIZA√á√ÉO ====================
        // Salva as tarefas atualizadas no localStorage
        saveTasks();
        // Chama fun√ß√£o que salva dados no navegador
        
        // Atualiza a exibi√ß√£o das tarefas na tela
        renderTasks();
        // Chama fun√ß√£o que reconstroi a lista visual com a nova tarefa
    }
    // Se taskText estiver vazio, nada acontece (tarefa n√£o √© adicionada)
}

// ==================== FUN√á√ÉO PARA MARCAR/DESMARCAR COMO CONCLU√çDA ====================
// Fun√ß√£o para alternar o status de conclus√£o da tarefa
function toggleTask(index) {
    // ==================== CONVERS√ÉO DE COMPATIBILIDADE ====================
    // Se task for string (dados antigos), converte para objeto
    if (typeof tasks[index] === 'string') {
        // Substitui string por objeto completo para manter compatibilidade
        tasks[index] = {
            id: Date.now(), // Gera ID √∫nico baseado no tempo atual
            text: tasks[index], // Usa a string original como texto da tarefa
            completed: false, // Inicialmente n√£o conclu√≠da
            category: 'pessoal', // Categoria padr√£o
            priority: 'baixa', // Prioridade padr√£o
            dueDate: '', // Sem data de vencimento
            createdAt: new Date().toISOString() // Data de cria√ß√£o atual
        };
    }
    
    // ==================== ALTERA√á√ÉO DO STATUS ====================
    // Alterna o status de conclus√£o da tarefa
    tasks[index].completed = !tasks[index].completed;
    // ! (operador NOT) inverte o valor boolean
    // Se era true (conclu√≠da), vira false (pendente)
    // Se era false (pendente), vira true (conclu√≠da)
    
    // ==================== PERSIST√äNCIA E ATUALIZA√á√ÉO ====================
    saveTasks(); // Salva altera√ß√µes no localStorage
    renderTasks(); // Atualiza visualiza√ß√£o na tela
}

// ==================== FUN√á√ÉO PARA REMOVER TAREFA ====================
// Fun√ß√£o para remover uma tarefa espec√≠fica
function removeTask(index) {
    // Remove 1 elemento do array na posi√ß√£o especificada pelo index
    tasks.splice(index, 1);
    // .splice(posi√ß√£o_inicial, quantidade_a_remover)
    // splice(index, 1) remove exatamente 1 elemento na posi√ß√£o 'index'
    // Os elementos seguintes "sobem" uma posi√ß√£o
    
    // ==================== PERSIST√äNCIA E ATUALIZA√á√ÉO ====================
    // Salva as tarefas atualizadas no localStorage
    saveTasks();
    // Atualiza a exibi√ß√£o das tarefas na tela
    renderTasks();
}

// ==================== FUN√á√ÉO PARA EDITAR TAREFA ====================
// Fun√ß√£o para editar uma tarefa existente
function editTask(index) {
    // ==================== CAPTURA DO TEXTO ATUAL ====================
    // Pega o texto atual da tarefa para mostrar no prompt
    const currentText = typeof tasks[index] === 'object' ? tasks[index].text : tasks[index];
    // Verifica se √© objeto ou string e pega o texto correspondente
    
    // ==================== INTERFACE DE EDI√á√ÉO ====================
    // Mostra uma caixa de di√°logo para o usu√°rio editar a tarefa
    const newTaskText = prompt("Editar tarefa:", currentText);
    // prompt() mostra janela popup com campo de texto
    // Primeiro par√¢metro √© a mensagem mostrada ao usu√°rio
    // Segundo par√¢metro define o valor inicial do campo (texto atual da tarefa)
    // Retorna null se usu√°rio cancelar, ou string com o texto digitado

    // ==================== VALIDA√á√ÉO E ATUALIZA√á√ÉO ====================
    // Verifica se o usu√°rio n√£o cancelou e digitou algo v√°lido
    if (newTaskText !== null && newTaskText.trim() !== "") {
        // newTaskText !== null verifica se usu√°rio n√£o clicou em "Cancelar"
        // newTaskText.trim() !== "" verifica se n√£o est√° vazio ap√≥s remover espa√ßos
        
        // ==================== CONVERS√ÉO DE COMPATIBILIDADE ====================
        // Se task for string (dados antigos), converte para objeto
        if (typeof tasks[index] === 'string') {
            tasks[index] = {
                id: Date.now(), // Gera ID √∫nico
                text: tasks[index], // Usa string original como texto
                completed: false, // Status padr√£o (n√£o conclu√≠da)
                category: 'pessoal', // Categoria padr√£o
                priority: 'baixa', // Prioridade padr√£o
                dueDate: '', // Sem data de vencimento
                createdAt: new Date().toISOString() // Data de cria√ß√£o atual
            };
        }
        
        // ==================== ATUALIZA√á√ÉO DO TEXTO ====================
        // Atualiza apenas o texto da tarefa, mantendo outras propriedades
        tasks[index].text = newTaskText.trim();
        // .trim() remove espa√ßos extras antes de salvar
        
        // ==================== PERSIST√äNCIA E ATUALIZA√á√ÉO ====================
        // Salva as tarefas atualizadas no localStorage
        saveTasks();
        // Atualiza a exibi√ß√£o das tarefas na tela
        renderTasks();
    }
    // Se usu√°rio cancelar ou deixar vazio, nada acontece
}









// ==================== FUN√á√ÉO DE BUSCA ====================
// Fun√ß√£o para buscar tarefas por texto
function searchTasks() {
    // ==================== CAPTURA DO TERMO DE BUSCA ====================
    const searchTerm = document.getElementById("busca").value.toLowerCase();
    // Pega valor do campo de busca e converte para min√∫sculas
    // .toLowerCase() torna a busca case-insensitive (n√£o diferencia mai√∫sculas/min√∫sculas)
    
    // ==================== VERIFICA√á√ÉO SE BUSCA EST√Å VAZIA ====================
    // Se campo de busca estiver vazio, volta aos filtros normais
    if (searchTerm.trim() === '') {
        applyFilters(); // Volta aos filtros normais (sem busca)
        return; // Para a execu√ß√£o da fun√ß√£o aqui (n√£o continua)
    }
    
    // ==================== APLICA√á√ÉO DOS FILTROS PRIMEIRO ====================
    // Come√ßa com todas as tarefas
    let filteredTasks = [...tasks];
    // [...array] √© spread operator - cria c√≥pia superficial do array original
    // N√£o modifica o array original

    // ==================== APLICA FILTRO DE STATUS ====================
    if (currentFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            // .filter() cria novo array apenas com elementos que atendem condi√ß√£o
            const isCompleted = typeof task === 'object' ? task.completed : false;
            // Pega status de conclus√£o da tarefa
            
            if (currentFilter === 'pendentes') {
                return !isCompleted; // Retorna true para tarefas N√ÉO conclu√≠das
            } else if (currentFilter === 'concluidas') {
                return isCompleted; // Retorna true para tarefas conclu√≠das
            }
            return true; // Fallback (n√£o deveria executar)
        });
    }
    
    // ==================== APLICA FILTRO DE CATEGORIA ====================
    if (currentCategoryFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            const taskCategory = typeof task === 'object' ? task.category : 'pessoal';
            // Pega categoria da tarefa
            return taskCategory === currentCategoryFilter;
            // Retorna true apenas para tarefas da categoria selecionada
        });
    }
    
    // ==================== APLICA BUSCA POR TEXTO ====================
    // Agora filtra por texto dentro dos resultados j√° filtrados
    filteredTasks = filteredTasks.filter(task => {
        const taskText = typeof task === 'object' ? task.text : task;
        // Pega texto da tarefa
        return taskText.toLowerCase().includes(searchTerm);
        // .includes() verifica se texto da tarefa cont√©m o termo buscado
        // Retorna true se encontrar o termo, false caso contr√°rio
    });
    
    // ==================== EXIBI√á√ÉO DOS RESULTADOS ====================
    renderFilteredTasks(filteredTasks);
    // Chama fun√ß√£o espec√≠fica para exibir apenas as tarefas que atendem todos os crit√©rios
}










// ==================== FUN√á√ïES DE FILTRO ====================

// Fun√ß√£o para filtrar tarefas por status (todas, pendentes, conclu√≠das)
function filterTasks(filterType) {
    // ==================== ATUALIZA√á√ÉO DO FILTRO ATUAL ====================
    // Armazena o tipo de filtro selecionado na vari√°vel global
    currentFilter = filterType;
    // filterType pode ser: 'todas', 'pendentes', ou 'concluidas'
    
    // ==================== ATUALIZA√á√ÉO VISUAL DOS BOT√ïES ====================
    // Remove classe 'active' de todos os bot√µes de filtro
    document.querySelectorAll('.filter-btn').forEach(btn => {
        // .querySelectorAll() seleciona todos elementos com classe .filter-btn
        // .forEach() executa fun√ß√£o para cada bot√£o encontrado
        btn.classList.remove('active');
        // .classList.remove() remove uma classe CSS do elemento
    });
    
    // Adiciona classe 'active' ao bot√£o que foi clicado
    event.target.classList.add('active');
    // event.target √© o elemento que disparou o evento (bot√£o clicado)
    // .classList.add() adiciona uma classe CSS ao elemento
    // Isso destaca visualmente qual filtro est√° ativo
    
    // ==================== APLICA√á√ÉO DO FILTRO ====================
    // Aplica os filtros combinados (status + categoria)
    applyFilters();
    // Chama fun√ß√£o que aplica todos os filtros ativos
}

// Fun√ß√£o para filtrar tarefas por categoria
function filterByCategory() {
    // ==================== CAPTURA DA CATEGORIA SELECIONADA ====================
    // Pega o valor selecionado no dropdown de categorias
    const categorySelect = document.getElementById("filtro-categoria");
    currentCategoryFilter = categorySelect.value;
    // .value pega o valor da op√ß√£o selecionada no elemento <select>
    // Atualiza vari√°vel global com a categoria escolhida
    
    // ==================== APLICA√á√ÉO DO FILTRO ====================
    // Aplica os filtros combinados (status + categoria)
    applyFilters();
    // Combina filtro de categoria com filtro de status ativo
}

// Fun√ß√£o principal que aplica todos os filtros combinados
function applyFilters() {
    // ==================== IN√çCIO COM TODAS AS TAREFAS ====================
    // Cria uma c√≥pia do array original para n√£o modificar o array principal
    let filteredTasks = [...tasks];
    // [...array] √© spread operator - cria c√≥pia superficial do array
    // Preserva o array original intacto
    
    // ==================== FILTRO POR STATUS (pendentes/conclu√≠das) ====================
    // Aplica filtro de status se n√£o for "todas"
    if (currentFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            // .filter() cria novo array apenas com elementos que atendem condi√ß√£o
            
            // Pega status de conclus√£o da tarefa
            const isCompleted = typeof task === 'object' ? task.completed : false;
            
            // Aplica l√≥gica baseada no filtro selecionado
            if (currentFilter === 'pendentes') {
                return !isCompleted; // Retorna tarefas N√ÉO conclu√≠das
                // ! inverte o valor boolean (false vira true, true vira false)
            } else if (currentFilter === 'concluidas') {
                return isCompleted; // Retorna tarefas conclu√≠das
            }
            
            return true; // Fallback - retorna todas (n√£o deveria acontecer)
        });
    }

    // ==================== FILTRO POR CATEGORIA ====================
    // Aplica filtro de categoria se n√£o for "todas"
    if (currentCategoryFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            // Pega categoria da tarefa
            const taskCategory = typeof task === 'object' ? task.category : 'pessoal';
            
            // Retorna apenas tarefas da categoria selecionada
            return taskCategory === currentCategoryFilter;
            // Compara categoria da tarefa com filtro selecionado
            // Retorna true se forem iguais, false caso contr√°rio
        });
    }
    
    // ==================== EXIBI√á√ÉO DOS RESULTADOS ====================
    // Renderiza as tarefas filtradas na tela
    renderFilteredTasks(filteredTasks);
    // Mostra apenas tarefas que passaram por todos os filtros
}

// ==================== FUN√á√ÉO PARA EXIBIR RESULTADOS FILTRADOS ====================
// Fun√ß√£o para renderizar tarefas filtradas
function renderFilteredTasks(filteredTasks) {
    // ==================== PREPARA√á√ÉO DA LISTA ====================
    const list = document.getElementById("lista-tarefas");
    list.innerHTML = ""; // Limpa lista atual antes de mostrar resultados filtrados

    // ==================== RENDERIZA√á√ÉO DE CADA TAREFA FILTRADA ====================
    filteredTasks.forEach((task, originalIndex) => {
        // Para cada tarefa no array filtrado
        
        // ==================== LOCALIZA√á√ÉO DO √çNDICE ORIGINAL ====================
        // Encontra o √≠ndice original da tarefa no array completo
        const taskIndex = tasks.findIndex(t => 
            // .findIndex() encontra posi√ß√£o do primeiro elemento que atende condi√ß√£o
            (typeof t === 'object' ? t.id : t) === (typeof task === 'object' ? task.id : task)
            // Compara IDs ou strings para encontrar tarefa original
            // Isso √© necess√°rio para manter bot√µes funcionais (editar/remover)
        );
        
        // ==================== CONSTRU√á√ÉO DO ELEMENTO HTML ====================
        const li = document.createElement("li");
        // Cria novo elemento de lista
        
        // Extrai propriedades da tarefa (mesmo c√≥digo da renderTasks)
        const taskText = typeof task === 'object' ? task.text : task;
        const isCompleted = typeof task === 'object' ? task.completed : false;
        const priority = typeof task === 'object' ? task.priority : 'baixa';
        const category = typeof task === 'object' ? task.category : 'pessoal';
        const dueDate = typeof task === 'object' ? task.dueDate : '';
        
        // ==================== GERA√á√ÉO DO HTML ====================
        // (id√™ntico √† renderTasks, mas usando taskIndex para manter funcionalidade)
        li.innerHTML = `
        <div class="task-content">
            <input type="checkbox" onchange="toggleTask(${taskIndex})" ${isCompleted ? 'checked' : ''}>
            <span class="task-text ${isCompleted ? 'completed' : ''}">${taskText}</span>
            <div class="task-info">
                <span class="priority priority-${priority}">${priority.toUpperCase()}</span>
                <span class="category">${category}</span>
                ${dueDate ? `<span class="due-date">üìÖ ${new Date(dueDate).toLocaleDateString()}</span>` : ''}
            </div>
        </div>
        <div class="actions">
            <button onclick="editTask(${taskIndex})">‚úèÔ∏è</button>
            <button onclick="removeTask(${taskIndex})">üóëÔ∏è</button>
        </div>
        `;
        // Usa taskIndex (posi√ß√£o original) ao inv√©s de originalIndex
        // Isso garante que bot√µes funcionem corretamente mesmo em listas filtradas
        
        // ==================== INSER√á√ÉO NA LISTA ====================
        list.appendChild(li);
        // Adiciona item √† lista visual
    });

    // ==================== ATUALIZA√á√ÉO DO CONTADOR ====================
    updateTaskCounter();
    // Atualiza contadores baseado em TODAS as tarefas, n√£o apenas filtradas
    // Contador sempre mostra estat√≠sticas totais
}

// ==================== FUN√á√ÉO PARA RESETAR FILTROS ====================
// Fun√ß√£o para limpar todos os filtros e mostrar todas as tarefas
function clearAllFilters() {
    // ==================== RESET DAS VARI√ÅVEIS DE FILTRO ====================
    currentFilter = 'todas'; // Volta filtro de status para "todas"
    currentCategoryFilter = 'todas'; // Volta filtro de categoria para "todas"
    
    // ==================== RESET DOS ELEMENTOS VISUAIS ====================
    // Limpa campo de busca
    document.getElementById("busca").value = '';
    // Define valor vazio no campo de busca
    
    // Reset do dropdown de categoria
    document.getElementById("filtro-categoria").value = 'todas';
    // Volta sele√ß√£o para "todas" no dropdown
    
    // Reset dos bot√µes de filtro
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active'); // Remove classe "active" de todos bot√µes
    });
    // Adiciona classe "active" apenas ao bot√£o "Todas"
    document.querySelector('.filter-btn[onclick="filterTasks(\'todas\')"]').classList.add('active');
    
    // ==================== EXIBI√á√ÉO DE TODAS AS TAREFAS ====================
    renderTasks(); // Mostra todas as tarefas sem filtros
}

// ==================== CONFIGURA√á√ÉO DE EVENTOS ====================
// Adiciona um ouvinte de eventos para permitir adicionar tarefa pressionando Enter
document.getElementById("tarefa").addEventListener("keypress", function(event) {
    // .addEventListener() registra fun√ß√£o para ser executada quando evento espec√≠fico acontece
    // "keypress" √© o evento disparado quando uma tecla √© pressionada
    // function(event) √© a fun√ß√£o an√¥nima que ser√° executada
    // event cont√©m informa√ß√µes sobre o evento que aconteceu
    
    // Verifica se a tecla pressionada foi Enter
    if (event.key === "Enter") {
        // event.key cont√©m o nome da tecla pressionada
        // "Enter" √© o nome da tecla Enter no teclado
        
        // Chama a fun√ß√£o para adicionar tarefa
        addTask();
        // Executa mesma a√ß√£o que clicar no bot√£o "Add"
    }
    // Se qualquer outra tecla for pressionada, nada acontece
});












// ==================== FUN√á√ÉO PARA ATUALIZAR CONTADOR DE TAREFAS ====================
// Fun√ß√£o para calcular e exibir estat√≠sticas das tarefas
function updateTaskCounter() {
    // ==================== CONTAGEM TOTAL ====================
    // Conta o total de tarefas no array
    const totalTasks = tasks.length;
    // .length propriedade que retorna n√∫mero de elementos no array

    // ==================== CONTAGEM DE TAREFAS PENDENTES ====================
    // Conta tarefas pendentes (n√£o conclu√≠das)
    const pendingTasks = tasks.filter(task => {
        // .filter() cria novo array apenas com elementos que atendem condi√ß√£o
        const isCompleted = typeof task === 'object' ? task.completed : false;
        // Verifica se tarefa est√° conclu√≠da
        return !isCompleted; // ! inverte - retorna tarefas N√ÉO conclu√≠das
        // Se isCompleted √© false, !isCompleted √© true (tarefa pendente)
        // Se isCompleted √© true, !isCompleted √© false (tarefa n√£o pendente)
    }).length; // .length conta quantos elementos h√° no array filtrado

    // ==================== CONTAGEM DE TAREFAS CONCLU√çDAS ====================
    // Conta tarefas conclu√≠das
    const completedTasks = tasks.filter(task => {
        // Verifica se a tarefa est√° conclu√≠da
        const isCompleted = typeof task === 'object' ? task.completed : false;
        return isCompleted; // Retorna apenas tarefas conclu√≠das (completed = true)
    }).length; // .length conta quantos elementos h√° no array filtrado

    // ==================== ATUALIZA√á√ÉO DOS ELEMENTOS HTML ====================
    // Atualiza o n√∫mero total de tarefas na interface
    document.getElementById('total-tasks').textContent = totalTasks;
    // .textContent define o texto do elemento HTML (apenas texto, sem HTML)
    // Substitui o conte√∫do do elemento com ID 'total-tasks'

    // Atualiza o n√∫mero de tarefas pendentes
    document.getElementById('pending-tasks').textContent = pendingTasks;
    // Atualiza elemento com ID 'pending-tasks'

    // Atualiza o n√∫mero de tarefas conclu√≠das
    document.getElementById('completed-tasks').textContent = completedTasks;
    // Atualiza elemento com ID 'completed-tasks'

    // ==================== EFEITO VISUAL ====================
    // Adiciona anima√ß√£o quando n√∫meros mudam
    animateCounterUpdate();
    // Chama fun√ß√£o que cria efeito visual nos contadores
}

// ==================== FUN√á√ÉO PARA ANIMA√á√ÉO DE CONTADOR ====================
// Fun√ß√£o para animar a atualiza√ß√£o dos contadores
function animateCounterUpdate(){
    // ==================== SELE√á√ÉO DOS ELEMENTOS N√öMERO ====================
    // Seleciona todos os elementos com classe 'counter-number'
    const counterNumbers = document.querySelectorAll('.counter-number');
    // .querySelectorAll() retorna lista com todos elementos que t√™m a classe especificada

    // ==================== APLICA√á√ÉO DA ANIMA√á√ÉO EM CADA CONTADOR ====================
    counterNumbers.forEach(number => {
        // Para cada elemento contador encontrado
        
        // Remove classe de anima√ß√£o se j√° existir
        number.classList.remove('counter-updated');
        // Remove classe CSS que controla a anima√ß√£o
        // Isso garante que anima√ß√£o possa ser aplicada novamente
        
        // Adiciona classe de anima√ß√£o
        number.classList.add('counter-updated');
        // Adiciona classe CSS que dispara anima√ß√£o definida no CSS
        // A anima√ß√£o faz n√∫mero "pulsar" e mudar cor temporariamente
        
        // Remove a classe ap√≥s a anima√ß√£o (500ms) para reiniciar a anima√ß√£o
        setTimeout(() => {
            // setTimeout() executa fun√ß√£o ap√≥s delay especificado
            number.classList.remove('counter-updated');
            // Remove classe ap√≥s 500 milissegundos
            // Isso permite que anima√ß√£o seja aplicada novamente no futuro
        }, 500);
        // 500 √© o tempo em milissegundos (0.5 segundos)
        // Deve corresponder √† dura√ß√£o da anima√ß√£o CSS
    });
}

// ==================== INICIALIZA√á√ÉO DA APLICA√á√ÉO ====================
// Inicializa tema antes de renderizar tarefas
initializeTheme();
// Chama fun√ß√£o que configura o tema (claro/escuro) baseado nas prefer√™ncias

// Executa a fun√ß√£o para exibir as tarefas assim que a p√°gina carrega
renderTasks();
// Esta linha executa imediatamente quando o script √© carregado pelo navegador
// Mostra tarefas salvas anteriormente (se houver) no localStorage
// Se n√£o houver tarefas salvas, mostra lista vazia
// Tamb√©m inicializa os contadores com valores corretos