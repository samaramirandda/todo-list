// INICIALIZA√á√ÉO DO SISTEMA
// Carrega as tarefas salvas no localStorage do navegador, ou cria um array vazio se n√£o houver nenhuma
let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
// JSON.parse() converte texto JSON de volta para objeto JavaScript
// localStorage.getItem("tasks") busca dados salvos com a chave "tasks"
// || [] significa "ou array vazio" caso n√£o exista nada salvo

// VARI√ÅVEIS DE CONTROLE DOS FILTROS
// Armazena o filtro de status atual (todas, pendentes, concluidas)
let currentFilter = 'todas';
// Armazena o filtro de categoria atual (todas, pessoal, trabalho, estudo)
let currentCategoryFilter = 'todas';

// FUN√á√ÉO PARA PERSIST√äNCIA DE DADOS
// Fun√ß√£o para salvar as tarefas no localStorage (mem√≥ria local do navegador)
function saveTasks() {
    // Converte o array de tarefas em texto JSON e salva no localStorage
    localStorage.setItem("tasks", JSON.stringify(tasks));
    // JSON.stringify() converte objeto JavaScript para texto JSON
    // localStorage.setItem() salva dados no navegador com uma chave espec√≠fica
}

// FUN√á√ÉO PRINCIPAL DE EXIBI√á√ÉO
// Fun√ß√£o para exibir todas as tarefas na tela
function renderTasks() {
    // Pega o elemento HTML da lista onde as tarefas ser√£o exibidas
    const list = document.getElementById("lista-tarefas");
    // document.getElementById() busca elemento HTML pelo ID
    
    // Limpa todo o conte√∫do da lista antes de recriar
    list.innerHTML = "";
    // innerHTML = "" remove todo conte√∫do HTML do elemento

    // Para cada tarefa no array, cria um item da lista
    tasks.forEach((task, index) => {
        // forEach() percorre cada item do array
        // task = tarefa atual, index = posi√ß√£o no array (0, 1, 2...)
        
        // Cria um novo elemento <li> (item da lista)
        const li = document.createElement("li");
        // createElement() cria um novo elemento HTML na mem√≥ria
        
        // VERIFICA√á√ïES DE COMPATIBILIDADE (suporte a dados antigos)
        // Verifica se task √© objeto ou string (compatibilidade com vers√£o antiga)
        const taskText = typeof task === 'object' ? task.text : task;
        // typeof verifica o tipo de dados
        // Operador tern√°rio: condi√ß√£o ? valor_se_true : valor_se_false
        
        const isCompleted = typeof task === 'object' ? task.completed : false;
        // Se for objeto, pega propriedade 'completed', sen√£o assume false
        
        const priority = typeof task === 'object' ? task.priority : 'baixa';
        // Se for objeto, pega propriedade 'priority', sen√£o assume 'baixa'
        
        const category = typeof task === 'object' ? task.category : 'pessoal';
        // Se for objeto, pega propriedade 'category', sen√£o assume 'pessoal'
        
        const dueDate = typeof task === 'object' ? task.dueDate : '';
        // Se for objeto, pega propriedade 'dueDate', sen√£o assume string vazia
        
        // CONSTRU√á√ÉO DO HTML DA TAREFA
        // Define o conte√∫do HTML do item da lista com checkbox e informa√ß√µes extras
        li.innerHTML = `
        <div class="task-content">
            <input type="checkbox" onchange="toggleTask(${index})" ${isCompleted ? 'checked' : ''}>
            <span class="task-text ${isCompleted ? 'completed' : ''}">${taskText}</span>
            <div class="task-info">
                <span class="priority priority-${priority}">${priority.toUpperCase()}</span>
                <span class="category">${category}</span>
                ${dueDate ? `<span class="due-date">üìÖ ${new Date(dueDate).toLocaleDateString()}</span>` : ''}
            </div>
        </div>
        <div class="actions">
            <button onclick="editTask(${index})">‚úèÔ∏è</button>
            <button onclick="removeTask(${index})">üóëÔ∏è</button>
        </div>
        `;
        // Template literal (`) permite inserir vari√°veis com ${variavel}
        // onchange="toggleTask(${index})" chama fun√ß√£o quando checkbox muda
        // ${isCompleted ? 'checked' : ''} adiciona 'checked' se tarefa conclu√≠da
        // ${isCompleted ? 'completed' : ''} adiciona classe CSS se conclu√≠da
        // priority.toUpperCase() converte texto para mai√∫sculo
        // new Date(dueDate).toLocaleDateString() formata data para padr√£o local
        
        // Adiciona o item criado √† lista na tela
        list.appendChild(li);
        // appendChild() insere o elemento <li> dentro do elemento <ul>
    });

    updateTaskCounter();
}

// FUN√á√ÉO PARA ADICIONAR NOVA TAREFA
// Fun√ß√£o para adicionar uma nova tarefa
function addTask() {
    // CAPTURA DOS ELEMENTOS HTML
    // Pega o elemento do campo de input onde o usu√°rio digita a tarefa
    const input = document.getElementById("tarefa");
    const categorySelect = document.getElementById("categoria");
    const prioritySelect = document.getElementById("prioridade");
    const dueDateInput = document.getElementById("data-vencimento");
    
    // VALIDA√á√ÉO DOS DADOS
    // Pega o valor digitado e remove espa√ßos em branco no in√≠cio/fim
    const taskText = input.value.trim();
    // .value pega o valor do input
    // .trim() remove espa√ßos extras no in√≠cio e fim

    // Verifica se o usu√°rio digitou alguma coisa
    if (taskText) {
        // CRIA√á√ÉO DO OBJETO TAREFA
        // Cria objeto da tarefa com todas as propriedades
        const newTask = {
            id: Date.now(), // Gera um ID √∫nico baseado no timestamp atual (millisegundos desde 1970)
            text: taskText, // O texto da tarefa √© o valor digitado pelo usu√°rio
            completed: false, // Inicialmente, a tarefa n√£o est√° completa
            category: categorySelect.value, // Categoria selecionada no dropdown
            priority: prioritySelect.value, // Prioridade selecionada no dropdown
            dueDate: dueDateInput.value, // Data de vencimento selecionada
            createdAt: new Date().toISOString() // Armazena a data de cria√ß√£o no formato ISO
        };

        // ATUALIZA√á√ÉO DO SISTEMA
        // Adiciona a nova tarefa ao final do array
        tasks.push(newTask);
        // .push() adiciona elemento no final do array
        
        // Limpa os campos de input
        input.value = "";
        dueDateInput.value = "";
        // Define valor vazio para limpar os campos
        
        // Salva as tarefas atualizadas no localStorage
        saveTasks();
        // Chama fun√ß√£o que salva dados no navegador
        
        // Atualiza a exibi√ß√£o das tarefas na tela
        renderTasks();
        // Chama fun√ß√£o que reconstroi a lista visual
    }
}

// FUN√á√ÉO PARA MARCAR/DESMARCAR COMO CONCLU√çDA
// Fun√ß√£o para alternar o status de conclus√£o da tarefa
function toggleTask(index) {
    // CONVERS√ÉO DE COMPATIBILIDADE
    // Se task for string, converte para objeto
    if (typeof tasks[index] === 'string') {
        // Substitui string por objeto completo para manter compatibilidade
        tasks[index] = {
            id: Date.now(), // Gera ID √∫nico
            text: tasks[index], // Usa a string como texto
            completed: false, // Inicialmente n√£o conclu√≠da
            category: 'pessoal', // Categoria padr√£o
            priority: 'baixa', // Prioridade padr√£o
            dueDate: '', // Sem data de vencimento
            createdAt: new Date().toISOString() // Data de cria√ß√£o atual
        };
    }
    
    // ALTERA√á√ÉO DO STATUS
    // Alterna o status de conclus√£o
    tasks[index].completed = !tasks[index].completed;
    // ! inverte o valor boolean (true vira false, false vira true)
    
    // PERSIST√äNCIA E ATUALIZA√á√ÉO
    saveTasks(); // Salva altera√ß√µes
    renderTasks(); // Atualiza visualiza√ß√£o
}

// FUN√á√ÉO PARA REMOVER TAREFA
// Fun√ß√£o para remover uma tarefa espec√≠fica
function removeTask(index) {
    // Remove 1 elemento do array na posi√ß√£o especificada pelo index
    tasks.splice(index, 1);
    // .splice(posi√ß√£o, quantidade) remove elementos do array
    // splice(index, 1) remove 1 elemento na posi√ß√£o 'index'
    
    // Salva as tarefas atualizadas no localStorage
    saveTasks();
    // Atualiza a exibi√ß√£o das tarefas na tela
    renderTasks();
}

// FUN√á√ÉO PARA EDITAR TAREFA
// Fun√ß√£o para editar uma tarefa existente
function editTask(index) {
    // CAPTURA DO TEXTO ATUAL
    // Pega o texto atual da tarefa
    const currentText = typeof tasks[index] === 'object' ? tasks[index].text : tasks[index];
    // Verifica se √© objeto ou string e pega o texto correspondente
    
    // INTERFACE DE EDI√á√ÉO
    // Mostra uma caixa de di√°logo para o usu√°rio editar a tarefa
    const newTaskText = prompt("Editar tarefa:", currentText);
    // prompt() mostra janela com campo de texto
    // Segundo par√¢metro define valor inicial do campo

    // VALIDA√á√ÉO E ATUALIZA√á√ÉO
    // Verifica se o usu√°rio n√£o cancelou e digitou algo v√°lido
    if (newTaskText !== null && newTaskText.trim() !== "") {
        // newTaskText !== null verifica se usu√°rio n√£o cancelou
        // newTaskText.trim() !== "" verifica se n√£o est√° vazio
        
        // CONVERS√ÉO DE COMPATIBILIDADE
        // Se task for string, converte para objeto
        if (typeof tasks[index] === 'string') {
            tasks[index] = {
                id: Date.now(), // Gera ID √∫nico
                text: tasks[index], // Usa string original como texto
                completed: false, // Status padr√£o
                category: 'pessoal', // Categoria padr√£o
                priority: 'baixa', // Prioridade padr√£o
                dueDate: '', // Sem data de vencimento
                createdAt: new Date().toISOString() // Data de cria√ß√£o atual
            };
        }
        
        // ATUALIZA√á√ÉO DO TEXTO
        // Atualiza apenas o texto da tarefa
        tasks[index].text = newTaskText.trim();
        // .trim() remove espa√ßos extras
        
        // PERSIST√äNCIA E ATUALIZA√á√ÉO
        // Salva as tarefas atualizadas no localStorage
        saveTasks();
        // Atualiza a exibi√ß√£o das tarefas na tela
        renderTasks();
    }
}

// FUN√á√ÉO DE BUSCA
// Fun√ß√£o para buscar tarefas
function searchTasks() {
    // CAPTURA DO TERMO DE BUSCA
    const searchTerm = document.getElementById("busca").value.toLowerCase();
    // .toLowerCase() converte para min√∫sculas para busca case-insensitive
    
    // Se campo de busca estiver vazio, aplica apenas os filtros
    if (searchTerm.trim() === '') {
        applyFilters(); // Volta aos filtros normais
        return; // Para a execu√ß√£o da fun√ß√£o aqui
    }
    
    // PRIMEIRO APLICA OS FILTROS, DEPOIS A BUSCA
    // Come√ßa com todas as tarefas
    let filteredTasks = [...tasks];

    // Aplica filtro de status
    if (currentFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            const isCompleted = typeof task === 'object' ? task.completed : false;
            if (currentFilter === 'pendentes') {
                return !isCompleted;
            } else if (currentFilter === 'concluidas') {
                return isCompleted;
            }
            return true;
        });
    }
    
    // Aplica filtro de categoria
    if (currentCategoryFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            const taskCategory = typeof task === 'object' ? task.category : 'pessoal';
            return taskCategory === currentCategoryFilter;
        });
    }
    
    // APLICA BUSCA POR TEXTO
    // Agora filtra por texto dentro dos resultados j√° filtrados
    filteredTasks = filteredTasks.filter(task => {
        const taskText = typeof task === 'object' ? task.text : task;
        return taskText.toLowerCase().includes(searchTerm);
        // .includes() verifica se texto cont√©m o termo buscado
    });
    
    // EXIBI√á√ÉO DOS RESULTADOS
    renderFilteredTasks(filteredTasks);
    // Chama fun√ß√£o espec√≠fica para exibir tarefas filtradas
}

// FUN√á√ïES DE FILTRO
// Fun√ß√£o para filtrar tarefas por status (todas, pendentes, conclu√≠das)
function filterTasks(filterType) {
    // ATUALIZA√á√ÉO DO FILTRO ATUAL
    // Armazena o tipo de filtro selecionado
    currentFilter = filterType;
    
    // ATUALIZA√á√ÉO VISUAL DOS BOT√ïES
    // Remove classe 'active' de todos os bot√µes de filtro
    document.querySelectorAll('.filter-btn').forEach(btn => {
        // .querySelectorAll() seleciona todos elementos com classe .filter-btn
        btn.classList.remove('active');
        // .classList.remove() remove uma classe CSS do elemento
    });
    
    // Adiciona classe 'active' ao bot√£o clicado
    event.target.classList.add('active');
    // event.target √© o elemento que foi clicado
    // .classList.add() adiciona uma classe CSS ao elemento
    
    // APLICA√á√ÉO DO FILTRO
    // Aplica os filtros combinados (status + categoria)
    applyFilters();
}

// Fun√ß√£o para filtrar tarefas por categoria
function filterByCategory() {
    // CAPTURA DA CATEGORIA SELECIONADA
    // Pega o valor selecionado no dropdown de categorias
    const categorySelect = document.getElementById("filtro-categoria");
    currentCategoryFilter = categorySelect.value;
    // .value pega o valor da op√ß√£o selecionada no select
    
    // APLICA√á√ÉO DO FILTRO
    // Aplica os filtros combinados (status + categoria)
    applyFilters();
}

// Fun√ß√£o principal que aplica todos os filtros combinados
function applyFilters() {
    // IN√çCIO COM TODAS AS TAREFAS
    // Cria uma c√≥pia do array original para n√£o modificar o array principal
    let filteredTasks = [...tasks];
    // [...array] √© spread operator - cria c√≥pia superficial do array
    
    // FILTRO POR STATUS (pendentes/conclu√≠das)
    // Aplica filtro de status se n√£o for "todas"
    if (currentFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            // .filter() cria novo array apenas com elementos que atendem condi√ß√£o
            
            // Pega status de conclus√£o da tarefa
            const isCompleted = typeof task === 'object' ? task.completed : false;
            
            // Aplica l√≥gica baseada no filtro selecionado
            if (currentFilter === 'pendentes') {
                return !isCompleted; // Retorna tarefas N√ÉO conclu√≠das
                // ! inverte o valor boolean
            } else if (currentFilter === 'concluidas') {
                return isCompleted; // Retorna tarefas conclu√≠das
            }
            
            return true; // Fallback - retorna todas (n√£o deveria acontecer)
        });
    }

    // FILTRO POR CATEGORIA
    // Aplica filtro de categoria se n√£o for "todas"
    if (currentCategoryFilter !== 'todas') {
        filteredTasks = filteredTasks.filter(task => {
            // Pega categoria da tarefa
            const taskCategory = typeof task === 'object' ? task.category : 'pessoal';
            
            // Retorna apenas tarefas da categoria selecionada
            return taskCategory === currentCategoryFilter;
            // Compara categoria da tarefa com filtro selecionado
        });
    }
    
    // EXIBI√á√ÉO DOS RESULTADOS
    // Renderiza as tarefas filtradas na tela
    renderFilteredTasks(filteredTasks);
}

// FUN√á√ÉO PARA EXIBIR RESULTADOS FILTRADOS
// Fun√ß√£o para renderizar tarefas filtradas
function renderFilteredTasks(filteredTasks) {
    // PREPARA√á√ÉO DA LISTA
    const list = document.getElementById("lista-tarefas");
    list.innerHTML = ""; // Limpa lista atual

    // RENDERIZA√á√ÉO DE CADA TAREFA FILTRADA
    filteredTasks.forEach((task, originalIndex) => {
        // LOCALIZA√á√ÉO DO √çNDICE ORIGINAL
        // Encontra o √≠ndice original da tarefa no array completo
        const taskIndex = tasks.findIndex(t => 
            // .findIndex() encontra posi√ß√£o do primeiro elemento que atende condi√ß√£o
            (typeof t === 'object' ? t.id : t) === (typeof task === 'object' ? task.id : task)
            // Compara IDs ou strings para encontrar tarefa original
        );
        
        // CONSTRU√á√ÉO DO ELEMENTO HTML
        const li = document.createElement("li");
        // Extrai propriedades da tarefa (mesmo c√≥digo da renderTasks)
        const taskText = typeof task === 'object' ? task.text : task;
        const isCompleted = typeof task === 'object' ? task.completed : false;
        const priority = typeof task === 'object' ? task.priority : 'baixa';
        const category = typeof task === 'object' ? task.category : 'pessoal';
        const dueDate = typeof task === 'object' ? task.dueDate : '';
        
        // GERA√á√ÉO DO HTML (id√™ntico √† renderTasks, mas usando taskIndex)
        li.innerHTML = `
        <div class="task-content">
            <input type="checkbox" onchange="toggleTask(${taskIndex})" ${isCompleted ? 'checked' : ''}>
            <span class="task-text ${isCompleted ? 'completed' : ''}">${taskText}</span>
            <div class="task-info">
                <span class="priority priority-${priority}">${priority.toUpperCase()}</span>
                <span class="category">${category}</span>
                ${dueDate ? `<span class="due-date">üìÖ ${new Date(dueDate).toLocaleDateString()}</span>` : ''}
            </div>
        </div>
        <div class="actions">
            <button onclick="editTask(${taskIndex})">‚úèÔ∏è</button>
            <button onclick="removeTask(${taskIndex})">üóëÔ∏è</button>
        </div>
        `;
        // Usa taskIndex (posi√ß√£o original) para manter funcionalidade correta
        
        // INSER√á√ÉO NA LISTA
        list.appendChild(li);
    });

    updateTaskCounter();
    // Atualiza contadores de tarefas na interface
}

// FUN√á√ÉO PARA RESETAR FILTROS
// Fun√ß√£o para limpar todos os filtros e mostrar todas as tarefas
function clearAllFilters() {
    // RESET DAS VARI√ÅVEIS DE FILTRO
    currentFilter = 'todas';
    currentCategoryFilter = 'todas';
    
    // RESET DOS ELEMENTOS VISUAIS
    // Limpa campo de busca
    document.getElementById("busca").value = '';
    
    // Reset do dropdown de categoria
    document.getElementById("filtro-categoria").value = 'todas';
    
    // Reset dos bot√µes de filtro
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector('.filter-btn[onclick="filterTasks(\'todas\')"]').classList.add('active');
    
    // EXIBI√á√ÉO DE TODAS AS TAREFAS
    renderTasks();
}

// CONFIGURA√á√ÉO DE EVENTOS
// Adiciona um ouvinte de eventos para permitir adicionar tarefa pressionando Enter
document.getElementById("tarefa").addEventListener("keypress", function(event) {
    // .addEventListener() registra fun√ß√£o para ser executada quando evento acontece
    // "keypress" √© o evento de pressionar tecla
    
    // Verifica se a tecla pressionada foi Enter
    if (event.key === "Enter") {
        // event.key cont√©m o nome da tecla pressionada
        
        // Chama a fun√ß√£o para adicionar tarefa
        addTask();
    }
});

// FUN√á√ÉO PARA ATUALIZAR CONTADOR DE TAREFAS
// Fun√ß√£o para calcular e exibir estat√≠sticas das tarefas
function updateTaskCounter() {
    // Conta tarefas pendentes (n√£o conclu√≠das)
    const totalTasks = tasks.length; // Total de tarefas

    // Conta tarefas pendentes (n√£o conclu√≠das)
    const pendingTasks = tasks.filter(task => {
        const isCompleted = typeof task === 'object' ? task.completed : false;
        return !isCompleted; // ! inverte - retorna tarefas N√ÉO conclu√≠das
    }).length; // .length conta quantos elementos h√° no array filtrado

    // Conta tarefas conclu√≠das
    const completedTasks = tasks.filter(task => {
            // Verifica se a tarefa est√° conclu√≠da
        const isCompleted = typeof task === 'object' ? task.completed : false;
        return isCompleted; // Retorna tarefas conclu√≠das
    }).length; // .length conta quantos elementos h√° no array filtrado

    // ATUALIZA√á√ÉO DOS ELEMENTOS HTML
    // Atualiza os contadores das tarefas na interface HTML
    document.getElementById('total-tasks').textContent = totalTasks;
    // .textContent define o texto do elemento HTML

    // Atualiza o numero de tarefas pendentes
    document.getElementById('pending-tasks').textContent = pendingTasks;

    // Atualiza o numero de tarefas conclu√≠das
    document.getElementById('completed-tasks').textContent = completedTasks;

    // Adiciona anima√ß√£o quando n√∫meros mudam
    animateCounterUpdate();
}

// FUN√á√ÉO PARA ANIMA√á√ÉO DE CONTADOR
// Fun√ß√£o para animar a atualiza√ß√£o dos contadores
function animateCounterUpdate(){
    // SELE√á√ÉO DOS ELEMENTOS N√öMERO
    // Seleciona todos os elementos com classe 'counter-number'
    const counterNumbers = document.querySelectorAll('.counter-number');

    counterNumbers.forEach(number => {
        // Remove classe de anima√ß√£o se j√° existir
        number.classList.remove('counter-updated');

        // Adiciona classe de anima√ß√£o
        number.classList.add('counter-updated');

        // Remove a classe ap√≥s a anima√ß√£o (500ms) para reiniciar a anima√ß√£o
        setTimeout(() => {
            number.classList.remove('counter-updated');
        }, 500);
        // setTimeout() executa fun√ß√£o ap√≥s delay especificado
    });
}

// INICIALIZA√á√ÉO DA APLICA√á√ÉO
// Executa a fun√ß√£o para exibir as tarefas assim que a p√°gina carrega
renderTasks();
// Esta linha executa imediatamente quando o script √© carregado
// Mostra tarefas salvas anteriormente (se houver)